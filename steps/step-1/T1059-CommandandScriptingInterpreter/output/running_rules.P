
/******************************************************/
/****         Predicates Declaration              *****/
/******************************************************/

primitive(malicious(_user)).
primitive(located(_user, _host)).
primitive(isBenignFile(_host, _path)).
primitive(rightToLeftOverride(_host, _path)).
primitive(doubleFileExtension(_host, _path)).
primitive(isReverseShell(_srcHost, _desthost, _path)).
primitive(fileAttr(_host, _path, _s, _ro, _wo, _xo, _rg, _wg, _xg, _rw, _ww, _xw)).
primitive(inGroup(_account, _group)).
primitive(fileGroupOwner(_host, _path, _group)).
primitive(groupAccessible(_host, _access, _path)).
primitive(fileOwner(_host, _account, _path)).
primitive(hasAccount(_user, _host, _account)).
primitive(inCompetent(_user)).
primitive(aclNW(_srcHost, _destHost, _protocol, _port)).
primitive(isNetScript(_srcHost, _destHost, _path, _flowName, _protocol, _port)).
primitive(networkServiceInfo(_destHost, _account, _software, _protocol, _port)).
primitive(tempNotStandardPort(_protocol, _port)).
primitive(standardPort(_protocol, _port)).


/****       Technique Assets        *****/

derived(seemsBenign(_host, _path)).
derived(canExecuteMaliciousPayload(_user, _host, _path)).
derived(canExecuteMaliciousFile(_user, _host, _path)).
derived(connOnNonStandardPort(_destHost, _port)).

/****   Technique Implementation    *****/

derived(masquerading(_host, _path)).
derived(userExecutionMaliciousFile(_user, _host, _path)).
derived(userExecution(_user, _host, _path)).
derived(dataFlowOnNonStandardPort(_destHost, _port)).

/****       Building Blocks         *****/

derived(isMaliciousFile(_host, _path)).
derived(localAccess(_user, _host, _account)).
derived(ownerAccessible(_host, _access, _path)).
derived(groupAccessible(_host, _access, _path)).
derived(worldAccessible(_host, _access, _path)).
derived(localFileProtection(_host, _account, _access, _path)).
derived(canAccessFile(_host, _account, _access, _path)).
derived(accessFile(_user, _host, _access, _path)).
derived(execCode(_user, _host, _account)).
derived(scriptNetAccess(_srcHost, _destHost, _path, _flowName, _protocol, _port)).
derived(canScriptAccessHost(_srcHost, _destHost, _path, _flowName, _protocol, _port)).
derived(dataFlow(_srcHost, _destHost, _flowName, _direction)).
derived(flowBind(_flowName, _protocol, _port)).
derived(useStandardPort(_protocol, _port)).


meta(attackGoal(_)).
meta(advances(_, _)).

/******************************************************/
/****         Tabling Predicates                  *****/
/*   All derived predicates should be tabled          */
/******************************************************/

:- table seemsBenign/2.
:- table canExecuteMaliciousPayload/3.
:- table canExecuteMaliciousFile/3.
:- table connOnNonStandardPort/2.
:- table masquerading/2.
:- table userExecutionMaliciousFile/3.
:- table userExecution/3.
:- table dataFlowOnNonStandardPort/2.
:- table isMaliciousFile/2.
:- table localAccess/3.
:- table ownerAccessible/3.
:- table groupAccessible/3.
:- table worldAccessible/3.
:- table localFileProtection/4.
:- table canAccessFile/4.
:- table accessFile/4.
:- table execCode/3.
:- table scriptNetAccess/6.
:- table canScriptAccessHost/6.
:- table dataFlow/4.
:- table flowBind/3.
:- table useStandardPort/2.



/******************************************************/
/****         Step 1 - Interaction Rules          *****/
/******************************************************/



/****         Step 1 - Interaction Rules          *****/

interaction_rule(
  (connOnNonStandardPort(DestHost, Port) :-
    dataFlowOnNonStandardPort(DestHost, Port)),
  rule_desc('Asset - Established connection on non-standard port',
  0.4)).


interaction_rule(
  (dataFlowOnNonStandardPort(DestHost, Port) :-
		dataFlow(SrcHost, DestHost, FlowName, Direction),
		tempNotStandardPort(Protocol, Port),
    flowBind(FlowName, Protocol, Port)),
  rule_desc('T1571 - Non-Standard Port',
  0.5)).

/*
interaction_rule(
  (dataFlowOnNonStandardPort(DestHost, Port) :-
		dataFlow(SrcHost, DestHost, FlowName, Direction),
    flowBind(FlowName, Protocol, Port),
		not useStandardPort(Protocol, Port)),
  rule_desc('T1571 - Non-Standard Port',
  0.5)).

interaction_rule(
  (useStandardPort(Protocol, Port) :-
		standardPort(Protocol, Port)),
  rule_desc('BB - Using a standard Port',
  0.5)).
*/

interaction_rule(
  (flowBind(FlowName, Protocol, Port) :-
    canScriptAccessHost(SrcHost, DestHost, Path, FlowName, Protocol, Port)),
  rule_desc('BB - Flow associated port and protocol',
  0.6)).

interaction_rule(
  (dataFlow(SrcHost, DestHost, FlowName, Direction) :-
    canScriptAccessHost(SrcHost, DestHost, Path, FlowName, Protocol, Port)),
  rule_desc('BB - Data flow initiated by script',
  0.3)).

interaction_rule(
  (canScriptAccessHost(SrcHost, DestHost, Path, FlowName, Protocol, Port) :-
		scriptNetAccess(SrcHost, DestHost, Path, FlowName, Protocol, Port),
		accessFile(User, SrcHost, exec, Path),
		networkServiceInfo(DestHost, Account, Software, Protocol, Port)),
  rule_desc('BB - Script access an exposed service',
  1.0)).

interaction_rule(
  (scriptNetAccess(SrcHost, DestHost, Path, FlowName, Protocol, Port) :-
		aclNW(SrcHost, DestHost, Protocol, Port),
		isNetScript(SrcHost, DestHost, Path, FlowName, Protocol, Port)),
  rule_desc('BB - Direct script network access',
  0.3)).

interaction_rule(
  (canExecuteMaliciousFile(User, Host, Path) :-
    userExecutionMaliciousFile(User, Host, Path)),
  rule_desc('Asset - Malicious file can be successfuly executed by a user',
  0.4)).

interaction_rule(
  (canExecuteMaliciousPayload(User, Host, Path) :-
    userExecution(User, Host, Path)),
  rule_desc('Asset - Successfuly malicious payload execution',
  0.4)).

interaction_rule(
  (userExecution(User, Host, Path) :-
		userExecutionMaliciousFile(User, Host, Path)),
  rule_desc('T1204 - User Execution - A legitimate user executes a malicious payload',
  0.5)).

interaction_rule(
  (userExecutionMaliciousFile(User, Host, Path) :-
		seemsBenign(Host, Path),
    accessFile(User, Host, exec, Path)),
  rule_desc('T1204.002 - User Execution - Malicious File - A legitimate user executes a malicious file',
  0.5)).

interaction_rule(
  (userExecutionMaliciousFile(User, Host, Path) :-
		inCompetent(User),
    isMaliciousFile(Host, Path),
    accessFile(User, Host, exec, Path)),
  rule_desc('T1204.002 - User Execution - Malicious File - A legitimate user executes a malicious file',
  0.5)).

interaction_rule(
  (accessFile(User, Host, Access, Path) :-
		execCode(User, Host, Account),
		canAccessFile(Host, Account, Access, Path)),
  rule_desc('BB - execCode implies file access',
  1.0)).

interaction_rule(
   (execCode(User, Host, Account) :-
		 hasAccount(User, Host, Account)),
   rule_desc('BB - A User can execute code using his account on a specific host', 1)).

interaction_rule(
  (canAccessFile(Host, Account, Access, Path) :-
	  localFileProtection(Host, Account, Access, Path)),
  rule_desc('BB - A legitimate account can access file',
  0.1)).

interaction_rule(
  (localFileProtection(Host, Account, Access, Path) :-
	  fileOwner(Host, Account, Path),
    ownerAccessible(Host, Access, Path)),
  rule_desc('BB - owner file access',
  0.1)).

interaction_rule(
  (localFileProtection(Host, Account, Access, Path) :-
	  inGroup(Account, Group),
    fileGroupOwner(Host, Path, Group),
    groupAccessible(Host, Access, Path)),
  rule_desc('BB - group file access',
  0.1)).

interaction_rule(
  (localFileProtection(Host, Account, Access, Path) :-
	  worldAccessible(Host, Access, Path)),
  rule_desc('BB - world file access',
  0.1)).

interaction_rule(
  (ownerAccessible(Host, read, Path) :-
	  fileAttr(Host, Path, _,r,_,_,_,_,_,_,_,_)),
  rule_desc('BB - owner file access',
  0.1)).

interaction_rule(
  (groupAccessible(Host, read, Path) :-
	  fileAttr(Host, Path, _,_,_,_,r,_,_,_,_,_)),
  rule_desc('BB - group file access',
  0.1)).

interaction_rule(
  (worldAccessible(Host, read, Path) :-
	  fileAttr(Host, Path, _,_,_,_,_,_,_,r,_,_)),
  rule_desc('BB - world file access',
  0.1)).

interaction_rule(
  (ownerAccessible(Host, write, Path) :-
	  fileAttr(Host, Path, _,_,w,_,_,_,_,_,_,_)),
  rule_desc('BB - owner file access',
  0.1)).

interaction_rule(
  (groupAccessible(Host, write, Path) :-
	  fileAttr(Host, Path, _,_,_,_,_,w,_,_,_,_)),
  rule_desc('BB - group file access',
  0.1)).

interaction_rule(
  (worldAccessible(Host, write, Path) :-
	  fileAttr(Host, Path, _,_,_,_,_,_,_,_,w,_)),
  rule_desc('BB - world file access',
  0.1)).

interaction_rule(
  (ownerAccessible(Host, exec, Path) :-
	  fileAttr(Host, Path, _,_,_,x,_,_,_,_,_,_)),
  rule_desc('BB - owner file access',
  0.1)).

interaction_rule(
  (groupAccessible(Host, exec, Path) :-
	  fileAttr(Host, Path, _,_,_,_,_,_,x,_,_,_)),
  rule_desc('BB - group file access',
  0.1)).

interaction_rule(
  (worldAccessible(Host, exec, Path) :-
	  fileAttr(Host, Path, _,_,_,_,_,_,_,_,_,x)),
  rule_desc('BB - world file access',
  0.1)).  

interaction_rule(
  (seemsBenign(Host, Path) :-
    masquerading(Host, Path)),
  rule_desc('Asset - Seems like a benign file - Masquerading',
  0.5)).

interaction_rule(
  (seemsBenign(Host, Path) :-
    isBenignFile(Host, Path)),
  rule_desc('Asset - Seems like a benign file - Fact',
  0.5)).

interaction_rule(
  (masquerading(Host, Path) :-
    isMaliciousFile(Host, Path),
    doubleFileExtension(Host, Path)),
  rule_desc('T1036.007 - Masquerading - Double File Extension',
  0.5)).

interaction_rule(
  (masquerading(Host, Path) :-
    isMaliciousFile(Host, Path),
    rightToLeftOverride(Host, Path)),
  rule_desc('T1036.002 - Masquerading - Right-to-Left Override',
  0.5)).

interaction_rule(
  (isMaliciousFile(SrcHost, Path) :-
    malicious(User),
    localAccess(User, DestHost, Account),
    isReverseShell(SrcHost, DestHost, Path)),
  rule_desc('Malicious file - Reverse shell',
  0.4)).

interaction_rule(
  (localAccess(User, Host, root):-
    located(User, Host)),
  rule_desc('BB - An user who is located in a host has root access to that host',
  0.2)).